in basic RNN,
the objects we need to instantiate are as follows:
   --different activation functions
   --the topology of network
   --the update procedure of training
   
   
     
how to validate the correctness of the algorithm:
   train_set 
   test_set
   
   
the weight are all stored in hidden layer(because one layer might consists of multiple sublayers)  
so we store the weights into sublayer


最复杂的一步是RNNSubHiddenLayer 怎么进行参数化，参数化完成后就可以进行activation,calculate prob,gradient etc
参数化应该逐层(按特定的顺序)进行

--------20171109------------------

before multiple thread we need to solve the following problems

1.correctness (one dim)
2.memory management (not rapidly grow during the training procedure)


-------20171113-----------------------------
Trainer.java
  how to configure and use testFiles
  
-------20171208-----------------------------
memory optimization 
  during the process of training, the memory is gradually increasing
  which classes are consuming the memory? 
  
-------20171213-----------------------------

MultiArrayDouble:
 
   resize_data(){
   
         data.clear();
		 for(int i=0;i<dataResize;i++){
			data.add(0.0);
		 }
		
		 strides.clear();
		 for(int i=0;i<shape.size();i++){
			strides.add(1);
		 }
   }

whether frequently clean will make memory leak?
   
TranscriptionLayer?

public Vector<Integer> path_to_string(Vector<Integer> path){
   Vector<Integer> str=new Vector<>();
   ......
}

public Vector<Integer> best_label_seq(){
   Vector<Integer> path=new Vector<>();
   ......
}

public Vector<Integer> segment_range(int time,int totalSegs){
   Vector<Integer> segRange=new Vector<>();
   ......
}

public double calculate_errors(DataSequence seq) {
   Vector<Integer> totalTimeShape=new Vector<>();
   ......
}

-------20171218-----------------------------
mat analysis:

















 
    
------------

java implementations of

   Offline Handwriting Recognition with Multidimensional Recurrent Neural Networks,Alex Graves





